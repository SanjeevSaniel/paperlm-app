<svg width="900" height="700" viewBox="0 0 900 700" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      .title { font: bold 20px Arial; text-anchor: middle; }
      .step-title { font: bold 14px Arial; text-anchor: middle; }
      .step-text { font: 12px Arial; text-anchor: middle; }
      .time-label { font: 10px Arial; text-anchor: start; fill: #6B7280; }
      .actor { fill: #3B82F6; stroke: #1E40AF; stroke-width: 2; rx: 25; }
      .process { fill: #10B981; stroke: #047857; stroke-width: 2; rx: 8; }
      .stream { fill: #EF4444; stroke: #DC2626; stroke-width: 2; rx: 8; }
      .data { fill: #F59E0B; stroke: #D97706; stroke-width: 2; rx: 8; }
      .message-arrow { stroke: #374151; stroke-width: 2; marker-end: url(#arrowhead); }
      .stream-arrow { stroke: #EF4444; stroke-width: 3; marker-end: url(#streamhead); }
      .return-arrow { stroke: #10B981; stroke-width: 2; marker-end: url(#returnhead); stroke-dasharray: 3,3; }
    </style>
    <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" fill="#374151" />
    </marker>
    <marker id="streamhead" markerWidth="12" markerHeight="8" refX="11" refY="4" orient="auto">
      <polygon points="0 0, 12 4, 0 8" fill="#EF4444" />
    </marker>
    <marker id="returnhead" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" fill="#10B981" />
    </marker>
  </defs>
  
  <!-- Title -->
  <text x="450" y="30" class="title" fill="#1F2937">Vercel AI SDK Streaming Flow Sequence</text>
  
  <!-- Actors -->
  <ellipse cx="80" cy="80" rx="60" ry="25" class="actor"/>
  <text x="80" y="85" class="step-title" fill="white">User</text>
  
  <ellipse cx="200" cy="80" rx="70" ry="25" class="actor"/>
  <text x="200" y="85" class="step-title" fill="white">ChatPanel</text>
  
  <ellipse cx="340" cy="80" rx="80" ry="25" class="actor"/>
  <text x="340" y="85" class="step-title" fill="white">useStreamingChat</text>
  
  <ellipse cx="500" cy="80" rx="85" ry="25" class="actor"/>
  <text x="500" y="85" class="step-title" fill="white">/api/query/stream</text>
  
  <ellipse cx="650" cy="80" rx="70" ry="25" class="actor"/>
  <text x="650" y="85" class="step-title" fill="white">Vercel AI</text>
  
  <ellipse cx="780" cy="80" rx="60" ry="25" class="actor"/>
  <text x="780" y="85" class="step-title" fill="white">OpenAI</text>
  
  <!-- Vertical Timeline Lines -->
  <line x1="80" y1="105" x2="80" y2="650" stroke="#E5E7EB" stroke-width="2"/>
  <line x1="200" y1="105" x2="200" y2="650" stroke="#E5E7EB" stroke-width="2"/>
  <line x1="340" y1="105" x2="340" y2="650" stroke="#E5E7EB" stroke-width="2"/>
  <line x1="500" y1="105" x2="500" y2="650" stroke="#E5E7EB" stroke-width="2"/>
  <line x1="650" y1="105" x2="650" y2="650" stroke="#E5E7EB" stroke-width="2"/>
  <line x1="780" y1="105" x2="780" y2="650" stroke="#E5E7EB" stroke-width="2"/>
  
  <!-- Step 1: User Input -->
  <line x1="80" y1="130" x2="200" y2="130" class="message-arrow"/>
  <rect x="85" y="120" width="110" height="20" fill="white" stroke="#D1D5DB"/>
  <text x="140" y="135" class="step-text">1. Submit message</text>
  <text x="20" y="145" class="time-label">t=0ms</text>
  
  <!-- Step 2: Save User Message -->
  <rect x="210" y="155" width="120" height="30" class="process"/>
  <text x="270" y="175" class="step-text" fill="white">2. Save user message</text>
  <text x="20" y="170" class="time-label">t=50ms</text>
  
  <!-- Step 3: Start Stream -->
  <line x1="200" y1="200" x2="340" y2="200" class="message-arrow"/>
  <rect x="205" y="190" width="130" height="20" fill="white" stroke="#D1D5DB"/>
  <text x="270" y="205" class="step-text">3. startStream()</text>
  <text x="20" y="215" class="time-label">t=100ms</text>
  
  <!-- Step 4: API Call -->
  <line x1="340" y1="230" x2="500" y2="230" class="message-arrow"/>
  <rect x="345" y="220" width="150" height="20" fill="white" stroke="#D1D5DB"/>
  <text x="420" y="235" class="step-text">4. POST /api/query/stream</text>
  <text x="20" y="245" class="time-label">t=150ms</text>
  
  <!-- Step 5: Vector Search -->
  <rect x="510" y="255" width="120" height="30" class="data"/>
  <text x="570" y="275" class="step-text" fill="white">5. Vector search</text>
  <text x="20" y="270" class="time-label">t=200ms</text>
  
  <!-- Step 6: Stream Request -->
  <line x1="500" y1="300" x2="650" y2="300" class="message-arrow"/>
  <rect x="505" y="290" width="140" height="20" fill="white" stroke="#D1D5DB"/>
  <text x="575" y="305" class="step-text">6. streamText()</text>
  <text x="20" y="315" class="time-label">t=300ms</text>
  
  <!-- Step 7: OpenAI Call -->
  <line x1="650" y1="330" x2="780" y2="330" class="message-arrow"/>
  <rect x="655" y="320" width="120" height="20" fill="white" stroke="#D1D5DB"/>
  <text x="715" y="335" class="step-text">7. OpenAI API</text>
  <text x="20" y="345" class="time-label">t=400ms</text>
  
  <!-- Streaming Response Section -->
  <rect x="30" y="365" width="840" height="180" fill="#FEF2F2" stroke="#FECACA" stroke-width="2" rx="8"/>
  <text x="450" y="385" class="step-title" fill="#DC2626">Real-time Streaming Phase</text>
  
  <!-- Stream Token 1 -->
  <line x1="780" y1="400" x2="650" y2="400" class="stream-arrow"/>
  <rect x="685" y="390" width="90" height="20" fill="white" stroke="#EF4444"/>
  <text x="730" y="405" class="step-text">Token chunk 1</text>
  <text x="20" y="415" class="time-label">t=500ms</text>
  
  <line x1="650" y1="400" x2="500" y2="400" class="stream-arrow"/>
  <line x1="500" y1="400" x2="340" y2="400" class="stream-arrow"/>
  <line x1="340" y1="400" x2="200" y2="400" class="stream-arrow"/>
  
  <!-- Stream Token 2 -->
  <line x1="780" y1="430" x2="650" y2="430" class="stream-arrow"/>
  <rect x="685" y="420" width="90" height="20" fill="white" stroke="#EF4444"/>
  <text x="730" y="435" class="step-text">Token chunk 2</text>
  <text x="20" y="445" class="time-label">t=600ms</text>
  
  <line x1="650" y1="430" x2="500" y2="430" class="stream-arrow"/>
  <line x1="500" y1="430" x2="340" y2="430" class="stream-arrow"/>
  <line x1="340" y1="430" x2="200" y2="430" class="stream-arrow"/>
  
  <!-- Stream Token N -->
  <text x="450" y="465" class="step-text" fill="#DC2626">... continuous streaming ...</text>
  
  <!-- Final Token -->
  <line x1="780" y1="490" x2="650" y2="490" class="stream-arrow"/>
  <rect x="685" y="480" width="90" height="20" fill="white" stroke="#EF4444"/>
  <text x="730" y="495" class="step-text">Final chunk</text>
  <text x="20" y="505" class="time-label">t=2000ms</text>
  
  <line x1="650" y1="490" x2="500" y2="490" class="stream-arrow"/>
  <line x1="500" y1="490" x2="340" y2="490" class="stream-arrow"/>
  <line x1="340" y1="490" x2="200" y2="490" class="stream-arrow"/>
  
  <!-- UI Updates -->
  <rect x="40" y="515" width="140" height="25" class="stream"/>
  <text x="110" y="533" class="step-text" fill="white">Live UI Updates</text>
  
  <!-- Completion Phase -->
  <rect x="30" y="565" width="840" height="80" fill="#F0FDF4" stroke="#BBF7D0" stroke-width="2" rx="8"/>
  <text x="450" y="585" class="step-title" fill="#047857">Completion Phase</text>
  
  <!-- Stream Complete -->
  <line x1="340" y1="600" x2="200" y2="600" class="return-arrow"/>
  <rect x="205" y="590" width="130" height="20" fill="white" stroke="#10B981"/>
  <text x="270" y="605" class="step-text">onStreamComplete()</text>
  <text x="20" y="615" class="time-label">t=2100ms</text>
  
  <!-- Save Response -->
  <rect x="210" y="620" width="120" height="25" class="process"/>
  <text x="270" y="637" class="step-text" fill="white">Save final response</text>
  <text x="20" y="640" class="time-label">t=2150ms</text>
  
  <!-- Performance Metrics Box -->
  <rect x="720" y="570" width="150" height="70" fill="#F8FAFC" stroke="#CBD5E1" stroke-width="1" rx="4"/>
  <text x="795" y="590" class="step-title" fill="#1E293B">Performance</text>
  <text x="730" y="608" class="step-text" fill="#475569">First chunk: 500ms</text>
  <text x="730" y="622" class="step-text" fill="#475569">Complete: 2.1s</text>
  <text x="730" y="636" class="step-text" fill="#475569">Latency: ~100ms</text>
</svg>