'use client';

import { Badge } from '@/components/ui/badge';
import { motion } from 'framer-motion';
import {
  BookOpen,
  Calendar,
  ExternalLink,
  FileText,
  Sparkles,
} from 'lucide-react';
import React from 'react';
import { Card, CardContent, CardHeader } from './ui';
import { Button } from './ui/Button';

interface NotebookCardProps {
  note: {
    id: string;
    title: string;
    content: string;
    createdAt: string;
    updatedAt: string;
    sourceDocumentId?: string;
    sourceUrl?: string;
    tags?: string[];
    metadata?: {
      originalDocument: string;
      documentType: string;
      autoGenerated: boolean;
      formattedAt: string;
    };
  };
  onView?: (id: string) => void;
  isNew?: boolean;
}

const NotebookCard: React.FC<NotebookCardProps> = ({ note, onView, isNew }) => {
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  const getPreview = (content: string, maxLength = 150) => {
    // Remove markdown formatting for preview
    const cleanContent = content
      .replace(/[#*`_]/g, '')
      .replace(/\n+/g, ' ')
      .trim();

    return cleanContent.length > maxLength
      ? cleanContent.slice(0, maxLength) + '...'
      : cleanContent;
  };

  return (
    <motion.div
      initial={isNew ? { opacity: 0, scale: 0.9, y: 20 } : { opacity: 1 }}
      animate={{ opacity: 1, scale: 1, y: 0 }}
      transition={{ duration: 0.5, ease: 'easeOut' }}
      className='group relative'>
      
      {/* Animated border for new cards */}
      {isNew && (
        <motion.div
          className='absolute inset-0 rounded-lg overflow-hidden'
          style={{
            background: `linear-gradient(90deg, 
              rgba(147, 51, 234, 0.6), 
              rgba(59, 130, 246, 0.6), 
              rgba(16, 185, 129, 0.6), 
              rgba(147, 51, 234, 0.6)
            )`,
            backgroundSize: '300% 100%',
          }}
          animate={{
            backgroundPosition: ['0% 50%', '100% 50%', '0% 50%'],
          }}
          transition={{
            duration: 3,
            repeat: 2, // Highlight for 6 seconds (3s x 2)
            ease: 'linear',
          }}
        />
      )}
      
      {/* Inner card with padding for border effect */}
      <Card className={`relative overflow-hidden shadow-sm hover:shadow-lg transition-all duration-300 bg-gradient-to-br from-purple-50/50 via-white to-blue-50/30 ${
        isNew ? 'border-2 border-transparent m-0.5' : 'border-0'
      }`}>
        {/* New badge for auto-generated notes */}
        {isNew && (
          <motion.div
            initial={{ opacity: 0, x: 50 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.3 }}
            className='absolute top-2 right-2 z-10'>
            <Badge className='bg-gradient-to-r from-purple-500 to-blue-500 text-white text-xs font-medium'>
              <Sparkles className='w-3 h-3 mr-1' />
              New AI Summary
            </Badge>
          </motion.div>
        )}

        {/* Accent gradient bar */}
        <div className='absolute left-0 top-0 w-1 h-full bg-gradient-to-b from-purple-500 via-blue-500 to-emerald-500 group-hover:w-1.5 transition-all duration-300' />

        <CardHeader className='pb-3'>
          <div className='flex items-start gap-3'>
            <div className='flex-shrink-0 w-10 h-10 bg-gradient-to-br from-purple-100 to-blue-100 rounded-lg flex items-center justify-center'>
              <BookOpen className='w-5 h-5 text-purple-600' />
            </div>

            <div className='flex-1 min-w-0'>
              <h3 className='font-semibold text-gray-900 text-sm leading-tight mb-1 group-hover:text-purple-700 transition-colors'>
                {note.title}
              </h3>

              {note.metadata?.autoGenerated && (
                <div className='flex items-center gap-2 text-xs text-gray-500'>
                  <Sparkles className='w-3 h-3' />
                  <span>
                    AI-generated from: {note.metadata.originalDocument}
                  </span>
                </div>
              )}
            </div>
          </div>
        </CardHeader>

        <CardContent className='pt-0'>
          {/* Content Preview */}
          <div className='mb-4'>
            <p className='text-sm text-gray-600 leading-relaxed'>
              {getPreview(note.content)}
            </p>
          </div>

          {/* Tags */}
          {note.tags && note.tags.length > 0 && (
            <div className='flex flex-wrap gap-1 mb-4'>
              {note.tags.slice(0, 3).map((tag, index) => (
                <Badge
                  key={index}
                  variant='secondary'
                  className='text-xs bg-gray-100 text-gray-700 hover:bg-gray-200 transition-colors'>
                  {tag}
                </Badge>
              ))}
              {note.tags.length > 3 && (
                <Badge
                  variant='outline'
                  className='text-xs text-gray-500'>
                  +{note.tags.length - 3}
                </Badge>
              )}
            </div>
          )}

          {/* Footer */}
          <div className='flex items-center justify-between text-xs text-gray-500'>
            <div className='flex items-center gap-3'>
              <span className='flex items-center gap-1'>
                <Calendar className='w-3 h-3' />
                {formatDate(note.createdAt)}
              </span>

              {note.sourceUrl && (
                <a
                  href={note.sourceUrl}
                  target='_blank'
                  rel='noopener noreferrer'
                  className='flex items-center gap-1 text-blue-600 hover:text-blue-700 transition-colors'
                  onClick={(e) => e.stopPropagation()}>
                  <ExternalLink className='w-3 h-3' />
                  Source
                </a>
              )}
            </div>

            {/* Action button */}
            <Button
              variant='ghost'
              size='sm'
              className='h-7 px-2 opacity-0 group-hover:opacity-100 transition-all duration-300 text-purple-600 hover:text-purple-700 hover:bg-purple-50'
              onClick={(e) => {
                e.stopPropagation();
                if (onView) onView(note.id);
              }}>
              <FileText className='w-3 h-3 mr-1' />
              View
            </Button>
          </div>
        </CardContent>

        {/* Subtle animation overlay */}
        {isNew && (
          <motion.div
            className='absolute inset-0 bg-gradient-to-r from-purple-400/10 via-transparent to-blue-400/10 pointer-events-none'
            animate={{
              x: ['-100%', '100%'],
            }}
            transition={{
              duration: 3,
              ease: 'easeInOut',
              delay: 0.5,
            }}
          />
        )}
      </Card>
    </motion.div>
  );
};

export default NotebookCard;
