export const runtime = 'nodejs';

import { NextRequest, NextResponse } from 'next/server';
import { generateChatCompletion } from '@/lib/openai';

export async function POST(request: NextRequest) {
  try {
    const { documentId, documentName, content, type, sourceUrl } =
      await request.json();

    if (!content) {
      return NextResponse.json(
        { error: 'No content provided' },
        { status: 400 },
      );
    }

    // Create AI prompt for formatting
    const systemPrompt = `You are an expert document formatter and summarizer. Your task is to take raw document content and transform it into a beautifully formatted, well-structured summary that's easy to read and understand.

Guidelines:
- Use clear headings (## for main sections, ### for subsections)
- Create bullet points for lists and key information
- Add relevant emojis to make it visually appealing
- Include a brief summary at the top
- Organize information logically
- Keep important details but make it concise
- Use markdown formatting for better readability`;

    const userPrompt = `Please format and summarize the following document:

**Document Name:** ${documentName}
**Type:** ${type}
${sourceUrl ? `**Source:** ${sourceUrl}` : ''}

**Content:**
${content.slice(0, 8000)} ${content.length > 8000 ? '...(truncated)' : ''}

Transform this into a well-organized, visually appealing summary with proper formatting, headings, and structure. Make it engaging and easy to scan.`;

    const formattedContent = await generateChatCompletion(
      [{ role: 'user', content: userPrompt }],
      systemPrompt,
    );

    // Create notebook entry
    const notebookEntry = {
      id: `notebook_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      title: `📄 ${documentName} - Summary`,
      content: formattedContent || 'Failed to format document content.',
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      sourceDocumentId: documentId,
      sourceUrl,
      tags: [
        type === 'website'
          ? '🌐 Website'
          : type === 'youtube'
          ? '🎥 Video'
          : '📁 Document',
      ],
      metadata: {
        originalDocument: documentName,
        documentType: type,
        sourceUrl,
        autoGenerated: true,
        formattedAt: new Date().toISOString(),
      },
    };

    return NextResponse.json(notebookEntry);
  } catch (error) {
    console.error('Format document error:', error);
    return NextResponse.json(
      { error: 'Failed to format document' },
      { status: 500 },
    );
  }
}
